Program^1^-1^program FindVector ;^FindVector^
Function^1^13^function int find ( string [100] arr, int tam, string item ) {^1^find^string [100] arr, int tam, string item^
Vars^2^-1^int i ;^0^?^?^?^?^i^?^?^?^?^
Vars^2^-1^int res = -1  ;^0^?^?^?^?^res^-1^
For^2^9^for ( i = 0 ; i < tam ; i + 1 ) {^i = 0^i < tam^i + 1^
If^3^8^if ( arr[i] == item ) {^arr[i] == item^
Assign^4^-1^res = i ;^res^i^
Assign^4^-1^i = tam ;^i^tam^
Other^3^5^}^
Other^2^4^}^
None^2^-1^
Return^2^-1^return res ; ^res^
None^2^-1^
Other^1^1^}^
None^1^-1^
Main^1^27^void main() {^
None^2^5^
Vars^2^-1^int tam, i, res ;^0^?^?^?^?^tam, i, res^?^?^?^?^
Vars^2^-1^string [ 100 ]  arr ;^3^100^arr^?^?^?^?^
Read^2^25^tam = read() ;^tam^
For^2^22^for ( i = 0 ; i < tam ; i + 1 ) {^i = 0^i < tam^i + 1^
Assign^3^-1^arr[i] = read() ;^arr[i]^read()^
Other^2^20^}^
None^2^-1^
Write^2^-1^print ( find(arr, tam, "Paco") ) ;^find(arr, tam, "Paco")^
None^2^19^
None^2^-1^
Other^1^15^}^
None^1^20^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^3^-1^
None^2^-1^
None^2^-1^
None^2^-1^
None^2^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^35^
None^1^-1^
None^1^33^
None^1^34^
None^1^-1^
None^1^29^
None^1^-1^
None^1^28^
None^1^28^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^1^-1^
None^2^-1^
None^2^-1^
None^3^-1^
None^3^-1^
None^2^-1^
None^2^-1^
None^2^-1^
None^3^-1^
None^3^-1^
None^3^-1^
None^2^-1^
None^1^-1^
